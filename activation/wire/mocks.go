// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -typed -package=wire -destination=./mocks.go -source=./interface.go
//

// Package wire is a generated GoMock package.
package wire

import (
	context "context"
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	signing "github.com/spacemeshos/go-spacemesh/signing"
	gomock "go.uber.org/mock/gomock"
)

// MockMalfeasanceValidator is a mock of MalfeasanceValidator interface.
type MockMalfeasanceValidator struct {
	ctrl     *gomock.Controller
	recorder *MockMalfeasanceValidatorMockRecorder
	isgomock struct{}
}

// MockMalfeasanceValidatorMockRecorder is the mock recorder for MockMalfeasanceValidator.
type MockMalfeasanceValidatorMockRecorder struct {
	mock *MockMalfeasanceValidator
}

// NewMockMalfeasanceValidator creates a new mock instance.
func NewMockMalfeasanceValidator(ctrl *gomock.Controller) *MockMalfeasanceValidator {
	mock := &MockMalfeasanceValidator{ctrl: ctrl}
	mock.recorder = &MockMalfeasanceValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMalfeasanceValidator) EXPECT() *MockMalfeasanceValidatorMockRecorder {
	return m.recorder
}

// PostIndex mocks base method.
func (m *MockMalfeasanceValidator) PostIndex(ctx context.Context, smesherID types.NodeID, commitment types.ATXID, post *types.Post, challenge []byte, numUnits uint32, idx int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostIndex", ctx, smesherID, commitment, post, challenge, numUnits, idx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostIndex indicates an expected call of PostIndex.
func (mr *MockMalfeasanceValidatorMockRecorder) PostIndex(ctx, smesherID, commitment, post, challenge, numUnits, idx any) *MockMalfeasanceValidatorPostIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostIndex", reflect.TypeOf((*MockMalfeasanceValidator)(nil).PostIndex), ctx, smesherID, commitment, post, challenge, numUnits, idx)
	return &MockMalfeasanceValidatorPostIndexCall{Call: call}
}

// MockMalfeasanceValidatorPostIndexCall wrap *gomock.Call
type MockMalfeasanceValidatorPostIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMalfeasanceValidatorPostIndexCall) Return(arg0 error) *MockMalfeasanceValidatorPostIndexCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMalfeasanceValidatorPostIndexCall) Do(f func(context.Context, types.NodeID, types.ATXID, *types.Post, []byte, uint32, int) error) *MockMalfeasanceValidatorPostIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMalfeasanceValidatorPostIndexCall) DoAndReturn(f func(context.Context, types.NodeID, types.ATXID, *types.Post, []byte, uint32, int) error) *MockMalfeasanceValidatorPostIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Signature mocks base method.
func (m_2 *MockMalfeasanceValidator) Signature(d signing.Domain, nodeID types.NodeID, m []byte, sig types.EdSignature) bool {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Signature", d, nodeID, m, sig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Signature indicates an expected call of Signature.
func (mr *MockMalfeasanceValidatorMockRecorder) Signature(d, nodeID, m, sig any) *MockMalfeasanceValidatorSignatureCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signature", reflect.TypeOf((*MockMalfeasanceValidator)(nil).Signature), d, nodeID, m, sig)
	return &MockMalfeasanceValidatorSignatureCall{Call: call}
}

// MockMalfeasanceValidatorSignatureCall wrap *gomock.Call
type MockMalfeasanceValidatorSignatureCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMalfeasanceValidatorSignatureCall) Return(arg0 bool) *MockMalfeasanceValidatorSignatureCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMalfeasanceValidatorSignatureCall) Do(f func(signing.Domain, types.NodeID, []byte, types.EdSignature) bool) *MockMalfeasanceValidatorSignatureCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMalfeasanceValidatorSignatureCall) DoAndReturn(f func(signing.Domain, types.NodeID, []byte, types.EdSignature) bool) *MockMalfeasanceValidatorSignatureCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
