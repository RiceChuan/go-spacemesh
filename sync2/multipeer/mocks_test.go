// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -typed -package=multipeer_test -destination=./mocks_test.go -source=./interface.go
//

// Package multipeer_test is a generated GoMock package.
package multipeer_test

import (
	context "context"
	io "io"
	reflect "reflect"

	p2p "github.com/spacemeshos/go-spacemesh/p2p"
	rangesync "github.com/spacemeshos/go-spacemesh/sync2/rangesync"
	gomock "go.uber.org/mock/gomock"
)

// MockSyncBase is a mock of SyncBase interface.
type MockSyncBase struct {
	ctrl     *gomock.Controller
	recorder *MockSyncBaseMockRecorder
	isgomock struct{}
}

// MockSyncBaseMockRecorder is the mock recorder for MockSyncBase.
type MockSyncBaseMockRecorder struct {
	mock *MockSyncBase
}

// NewMockSyncBase creates a new mock instance.
func NewMockSyncBase(ctrl *gomock.Controller) *MockSyncBase {
	mock := &MockSyncBase{ctrl: ctrl}
	mock.recorder = &MockSyncBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncBase) EXPECT() *MockSyncBaseMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockSyncBase) Count() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSyncBaseMockRecorder) Count() *MockSyncBaseCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSyncBase)(nil).Count))
	return &MockSyncBaseCountCall{Call: call}
}

// MockSyncBaseCountCall wrap *gomock.Call
type MockSyncBaseCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncBaseCountCall) Return(arg0 int, arg1 error) *MockSyncBaseCountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncBaseCountCall) Do(f func() (int, error)) *MockSyncBaseCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncBaseCountCall) DoAndReturn(f func() (int, error)) *MockSyncBaseCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Probe mocks base method.
func (m *MockSyncBase) Probe(ctx context.Context, p p2p.Peer) (rangesync.ProbeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Probe", ctx, p)
	ret0, _ := ret[0].(rangesync.ProbeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Probe indicates an expected call of Probe.
func (mr *MockSyncBaseMockRecorder) Probe(ctx, p any) *MockSyncBaseProbeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Probe", reflect.TypeOf((*MockSyncBase)(nil).Probe), ctx, p)
	return &MockSyncBaseProbeCall{Call: call}
}

// MockSyncBaseProbeCall wrap *gomock.Call
type MockSyncBaseProbeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncBaseProbeCall) Return(arg0 rangesync.ProbeResult, arg1 error) *MockSyncBaseProbeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncBaseProbeCall) Do(f func(context.Context, p2p.Peer) (rangesync.ProbeResult, error)) *MockSyncBaseProbeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncBaseProbeCall) DoAndReturn(f func(context.Context, p2p.Peer) (rangesync.ProbeResult, error)) *MockSyncBaseProbeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Serve mocks base method.
func (m *MockSyncBase) Serve(ctx context.Context, p p2p.Peer, stream io.ReadWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", ctx, p, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockSyncBaseMockRecorder) Serve(ctx, p, stream any) *MockSyncBaseServeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockSyncBase)(nil).Serve), ctx, p, stream)
	return &MockSyncBaseServeCall{Call: call}
}

// MockSyncBaseServeCall wrap *gomock.Call
type MockSyncBaseServeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncBaseServeCall) Return(arg0 error) *MockSyncBaseServeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncBaseServeCall) Do(f func(context.Context, p2p.Peer, io.ReadWriter) error) *MockSyncBaseServeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncBaseServeCall) DoAndReturn(f func(context.Context, p2p.Peer, io.ReadWriter) error) *MockSyncBaseServeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Sync mocks base method.
func (m *MockSyncBase) Sync(ctx context.Context, p p2p.Peer, x, y rangesync.KeyBytes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, p, x, y)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockSyncBaseMockRecorder) Sync(ctx, p, x, y any) *MockSyncBaseSyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockSyncBase)(nil).Sync), ctx, p, x, y)
	return &MockSyncBaseSyncCall{Call: call}
}

// MockSyncBaseSyncCall wrap *gomock.Call
type MockSyncBaseSyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncBaseSyncCall) Return(arg0 error) *MockSyncBaseSyncCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncBaseSyncCall) Do(f func(context.Context, p2p.Peer, rangesync.KeyBytes, rangesync.KeyBytes) error) *MockSyncBaseSyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncBaseSyncCall) DoAndReturn(f func(context.Context, p2p.Peer, rangesync.KeyBytes, rangesync.KeyBytes) error) *MockSyncBaseSyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSyncKeyHandler is a mock of SyncKeyHandler interface.
type MockSyncKeyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSyncKeyHandlerMockRecorder
	isgomock struct{}
}

// MockSyncKeyHandlerMockRecorder is the mock recorder for MockSyncKeyHandler.
type MockSyncKeyHandlerMockRecorder struct {
	mock *MockSyncKeyHandler
}

// NewMockSyncKeyHandler creates a new mock instance.
func NewMockSyncKeyHandler(ctrl *gomock.Controller) *MockSyncKeyHandler {
	mock := &MockSyncKeyHandler{ctrl: ctrl}
	mock.recorder = &MockSyncKeyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncKeyHandler) EXPECT() *MockSyncKeyHandlerMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockSyncKeyHandler) Commit(ctx context.Context, peer p2p.Peer, base rangesync.OrderedSet, received rangesync.SeqResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, peer, base, received)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSyncKeyHandlerMockRecorder) Commit(ctx, peer, base, received any) *MockSyncKeyHandlerCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSyncKeyHandler)(nil).Commit), ctx, peer, base, received)
	return &MockSyncKeyHandlerCommitCall{Call: call}
}

// MockSyncKeyHandlerCommitCall wrap *gomock.Call
type MockSyncKeyHandlerCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncKeyHandlerCommitCall) Return(arg0 error) *MockSyncKeyHandlerCommitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncKeyHandlerCommitCall) Do(f func(context.Context, p2p.Peer, rangesync.OrderedSet, rangesync.SeqResult) error) *MockSyncKeyHandlerCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncKeyHandlerCommitCall) DoAndReturn(f func(context.Context, p2p.Peer, rangesync.OrderedSet, rangesync.SeqResult) error) *MockSyncKeyHandlerCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPairwiseSyncer is a mock of PairwiseSyncer interface.
type MockPairwiseSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockPairwiseSyncerMockRecorder
	isgomock struct{}
}

// MockPairwiseSyncerMockRecorder is the mock recorder for MockPairwiseSyncer.
type MockPairwiseSyncerMockRecorder struct {
	mock *MockPairwiseSyncer
}

// NewMockPairwiseSyncer creates a new mock instance.
func NewMockPairwiseSyncer(ctrl *gomock.Controller) *MockPairwiseSyncer {
	mock := &MockPairwiseSyncer{ctrl: ctrl}
	mock.recorder = &MockPairwiseSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPairwiseSyncer) EXPECT() *MockPairwiseSyncerMockRecorder {
	return m.recorder
}

// Probe mocks base method.
func (m *MockPairwiseSyncer) Probe(ctx context.Context, peer p2p.Peer, os rangesync.OrderedSet, x, y rangesync.KeyBytes) (rangesync.ProbeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Probe", ctx, peer, os, x, y)
	ret0, _ := ret[0].(rangesync.ProbeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Probe indicates an expected call of Probe.
func (mr *MockPairwiseSyncerMockRecorder) Probe(ctx, peer, os, x, y any) *MockPairwiseSyncerProbeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Probe", reflect.TypeOf((*MockPairwiseSyncer)(nil).Probe), ctx, peer, os, x, y)
	return &MockPairwiseSyncerProbeCall{Call: call}
}

// MockPairwiseSyncerProbeCall wrap *gomock.Call
type MockPairwiseSyncerProbeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPairwiseSyncerProbeCall) Return(arg0 rangesync.ProbeResult, arg1 error) *MockPairwiseSyncerProbeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPairwiseSyncerProbeCall) Do(f func(context.Context, p2p.Peer, rangesync.OrderedSet, rangesync.KeyBytes, rangesync.KeyBytes) (rangesync.ProbeResult, error)) *MockPairwiseSyncerProbeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPairwiseSyncerProbeCall) DoAndReturn(f func(context.Context, p2p.Peer, rangesync.OrderedSet, rangesync.KeyBytes, rangesync.KeyBytes) (rangesync.ProbeResult, error)) *MockPairwiseSyncerProbeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Serve mocks base method.
func (m *MockPairwiseSyncer) Serve(context context.Context, stream io.ReadWriter, os rangesync.OrderedSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", context, stream, os)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockPairwiseSyncerMockRecorder) Serve(context, stream, os any) *MockPairwiseSyncerServeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockPairwiseSyncer)(nil).Serve), context, stream, os)
	return &MockPairwiseSyncerServeCall{Call: call}
}

// MockPairwiseSyncerServeCall wrap *gomock.Call
type MockPairwiseSyncerServeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPairwiseSyncerServeCall) Return(arg0 error) *MockPairwiseSyncerServeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPairwiseSyncerServeCall) Do(f func(context.Context, io.ReadWriter, rangesync.OrderedSet) error) *MockPairwiseSyncerServeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPairwiseSyncerServeCall) DoAndReturn(f func(context.Context, io.ReadWriter, rangesync.OrderedSet) error) *MockPairwiseSyncerServeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Sync mocks base method.
func (m *MockPairwiseSyncer) Sync(ctx context.Context, peer p2p.Peer, os rangesync.OrderedSet, x, y rangesync.KeyBytes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, peer, os, x, y)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockPairwiseSyncerMockRecorder) Sync(ctx, peer, os, x, y any) *MockPairwiseSyncerSyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockPairwiseSyncer)(nil).Sync), ctx, peer, os, x, y)
	return &MockPairwiseSyncerSyncCall{Call: call}
}

// MockPairwiseSyncerSyncCall wrap *gomock.Call
type MockPairwiseSyncerSyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPairwiseSyncerSyncCall) Return(arg0 error) *MockPairwiseSyncerSyncCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPairwiseSyncerSyncCall) Do(f func(context.Context, p2p.Peer, rangesync.OrderedSet, rangesync.KeyBytes, rangesync.KeyBytes) error) *MockPairwiseSyncerSyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPairwiseSyncerSyncCall) DoAndReturn(f func(context.Context, p2p.Peer, rangesync.OrderedSet, rangesync.KeyBytes, rangesync.KeyBytes) error) *MockPairwiseSyncerSyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MocksyncRunner is a mock of syncRunner interface.
type MocksyncRunner struct {
	ctrl     *gomock.Controller
	recorder *MocksyncRunnerMockRecorder
	isgomock struct{}
}

// MocksyncRunnerMockRecorder is the mock recorder for MocksyncRunner.
type MocksyncRunnerMockRecorder struct {
	mock *MocksyncRunner
}

// NewMocksyncRunner creates a new mock instance.
func NewMocksyncRunner(ctrl *gomock.Controller) *MocksyncRunner {
	mock := &MocksyncRunner{ctrl: ctrl}
	mock.recorder = &MocksyncRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksyncRunner) EXPECT() *MocksyncRunnerMockRecorder {
	return m.recorder
}

// FullSync mocks base method.
func (m *MocksyncRunner) FullSync(ctx context.Context, syncPeers []p2p.Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullSync", ctx, syncPeers)
	ret0, _ := ret[0].(error)
	return ret0
}

// FullSync indicates an expected call of FullSync.
func (mr *MocksyncRunnerMockRecorder) FullSync(ctx, syncPeers any) *MocksyncRunnerFullSyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullSync", reflect.TypeOf((*MocksyncRunner)(nil).FullSync), ctx, syncPeers)
	return &MocksyncRunnerFullSyncCall{Call: call}
}

// MocksyncRunnerFullSyncCall wrap *gomock.Call
type MocksyncRunnerFullSyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocksyncRunnerFullSyncCall) Return(arg0 error) *MocksyncRunnerFullSyncCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocksyncRunnerFullSyncCall) Do(f func(context.Context, []p2p.Peer) error) *MocksyncRunnerFullSyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocksyncRunnerFullSyncCall) DoAndReturn(f func(context.Context, []p2p.Peer) error) *MocksyncRunnerFullSyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SplitSync mocks base method.
func (m *MocksyncRunner) SplitSync(ctx context.Context, syncPeers []p2p.Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitSync", ctx, syncPeers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SplitSync indicates an expected call of SplitSync.
func (mr *MocksyncRunnerMockRecorder) SplitSync(ctx, syncPeers any) *MocksyncRunnerSplitSyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitSync", reflect.TypeOf((*MocksyncRunner)(nil).SplitSync), ctx, syncPeers)
	return &MocksyncRunnerSplitSyncCall{Call: call}
}

// MocksyncRunnerSplitSyncCall wrap *gomock.Call
type MocksyncRunnerSplitSyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocksyncRunnerSplitSyncCall) Return(arg0 error) *MocksyncRunnerSplitSyncCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocksyncRunnerSplitSyncCall) Do(f func(context.Context, []p2p.Peer) error) *MocksyncRunnerSplitSyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocksyncRunnerSplitSyncCall) DoAndReturn(f func(context.Context, []p2p.Peer) error) *MocksyncRunnerSplitSyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
