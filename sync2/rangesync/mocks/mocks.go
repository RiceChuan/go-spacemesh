// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -typed -package=mocks -destination=./mocks/mocks.go -source=./interface.go -exclude_interfaces=Requester,SyncMessage,Conduit
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	rangesync "github.com/spacemeshos/go-spacemesh/sync2/rangesync"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderedSet is a mock of OrderedSet interface.
type MockOrderedSet struct {
	ctrl     *gomock.Controller
	recorder *MockOrderedSetMockRecorder
	isgomock struct{}
}

// MockOrderedSetMockRecorder is the mock recorder for MockOrderedSet.
type MockOrderedSetMockRecorder struct {
	mock *MockOrderedSet
}

// NewMockOrderedSet creates a new mock instance.
func NewMockOrderedSet(ctrl *gomock.Controller) *MockOrderedSet {
	mock := &MockOrderedSet{ctrl: ctrl}
	mock.recorder = &MockOrderedSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderedSet) EXPECT() *MockOrderedSetMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockOrderedSet) Add(k rangesync.KeyBytes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", k)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockOrderedSetMockRecorder) Add(k any) *MockOrderedSetAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockOrderedSet)(nil).Add), k)
	return &MockOrderedSetAddCall{Call: call}
}

// MockOrderedSetAddCall wrap *gomock.Call
type MockOrderedSetAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetAddCall) Return(arg0 error) *MockOrderedSetAddCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetAddCall) Do(f func(rangesync.KeyBytes) error) *MockOrderedSetAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetAddCall) DoAndReturn(f func(rangesync.KeyBytes) error) *MockOrderedSetAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Advance mocks base method.
func (m *MockOrderedSet) Advance() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Advance")
	ret0, _ := ret[0].(error)
	return ret0
}

// Advance indicates an expected call of Advance.
func (mr *MockOrderedSetMockRecorder) Advance() *MockOrderedSetAdvanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Advance", reflect.TypeOf((*MockOrderedSet)(nil).Advance))
	return &MockOrderedSetAdvanceCall{Call: call}
}

// MockOrderedSetAdvanceCall wrap *gomock.Call
type MockOrderedSetAdvanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetAdvanceCall) Return(arg0 error) *MockOrderedSetAdvanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetAdvanceCall) Do(f func() error) *MockOrderedSetAdvanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetAdvanceCall) DoAndReturn(f func() error) *MockOrderedSetAdvanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Empty mocks base method.
func (m *MockOrderedSet) Empty() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Empty indicates an expected call of Empty.
func (mr *MockOrderedSetMockRecorder) Empty() *MockOrderedSetEmptyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockOrderedSet)(nil).Empty))
	return &MockOrderedSetEmptyCall{Call: call}
}

// MockOrderedSetEmptyCall wrap *gomock.Call
type MockOrderedSetEmptyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetEmptyCall) Return(arg0 bool, arg1 error) *MockOrderedSetEmptyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetEmptyCall) Do(f func() (bool, error)) *MockOrderedSetEmptyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetEmptyCall) DoAndReturn(f func() (bool, error)) *MockOrderedSetEmptyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureLoaded mocks base method.
func (m *MockOrderedSet) EnsureLoaded() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureLoaded")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureLoaded indicates an expected call of EnsureLoaded.
func (mr *MockOrderedSetMockRecorder) EnsureLoaded() *MockOrderedSetEnsureLoadedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureLoaded", reflect.TypeOf((*MockOrderedSet)(nil).EnsureLoaded))
	return &MockOrderedSetEnsureLoadedCall{Call: call}
}

// MockOrderedSetEnsureLoadedCall wrap *gomock.Call
type MockOrderedSetEnsureLoadedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetEnsureLoadedCall) Return(arg0 error) *MockOrderedSetEnsureLoadedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetEnsureLoadedCall) Do(f func() error) *MockOrderedSetEnsureLoadedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetEnsureLoadedCall) DoAndReturn(f func() error) *MockOrderedSetEnsureLoadedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRangeInfo mocks base method.
func (m *MockOrderedSet) GetRangeInfo(x, y rangesync.KeyBytes) (rangesync.RangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRangeInfo", x, y)
	ret0, _ := ret[0].(rangesync.RangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRangeInfo indicates an expected call of GetRangeInfo.
func (mr *MockOrderedSetMockRecorder) GetRangeInfo(x, y any) *MockOrderedSetGetRangeInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRangeInfo", reflect.TypeOf((*MockOrderedSet)(nil).GetRangeInfo), x, y)
	return &MockOrderedSetGetRangeInfoCall{Call: call}
}

// MockOrderedSetGetRangeInfoCall wrap *gomock.Call
type MockOrderedSetGetRangeInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetGetRangeInfoCall) Return(arg0 rangesync.RangeInfo, arg1 error) *MockOrderedSetGetRangeInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetGetRangeInfoCall) Do(f func(rangesync.KeyBytes, rangesync.KeyBytes) (rangesync.RangeInfo, error)) *MockOrderedSetGetRangeInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetGetRangeInfoCall) DoAndReturn(f func(rangesync.KeyBytes, rangesync.KeyBytes) (rangesync.RangeInfo, error)) *MockOrderedSetGetRangeInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Has mocks base method.
func (m *MockOrderedSet) Has(arg0 rangesync.KeyBytes) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockOrderedSetMockRecorder) Has(arg0 any) *MockOrderedSetHasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockOrderedSet)(nil).Has), arg0)
	return &MockOrderedSetHasCall{Call: call}
}

// MockOrderedSetHasCall wrap *gomock.Call
type MockOrderedSetHasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetHasCall) Return(arg0 bool, arg1 error) *MockOrderedSetHasCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetHasCall) Do(f func(rangesync.KeyBytes) (bool, error)) *MockOrderedSetHasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetHasCall) DoAndReturn(f func(rangesync.KeyBytes) (bool, error)) *MockOrderedSetHasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Items mocks base method.
func (m *MockOrderedSet) Items() rangesync.SeqResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Items")
	ret0, _ := ret[0].(rangesync.SeqResult)
	return ret0
}

// Items indicates an expected call of Items.
func (mr *MockOrderedSetMockRecorder) Items() *MockOrderedSetItemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Items", reflect.TypeOf((*MockOrderedSet)(nil).Items))
	return &MockOrderedSetItemsCall{Call: call}
}

// MockOrderedSetItemsCall wrap *gomock.Call
type MockOrderedSetItemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetItemsCall) Return(arg0 rangesync.SeqResult) *MockOrderedSetItemsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetItemsCall) Do(f func() rangesync.SeqResult) *MockOrderedSetItemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetItemsCall) DoAndReturn(f func() rangesync.SeqResult) *MockOrderedSetItemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Loaded mocks base method.
func (m *MockOrderedSet) Loaded() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Loaded")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Loaded indicates an expected call of Loaded.
func (mr *MockOrderedSetMockRecorder) Loaded() *MockOrderedSetLoadedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Loaded", reflect.TypeOf((*MockOrderedSet)(nil).Loaded))
	return &MockOrderedSetLoadedCall{Call: call}
}

// MockOrderedSetLoadedCall wrap *gomock.Call
type MockOrderedSetLoadedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetLoadedCall) Return(arg0 bool) *MockOrderedSetLoadedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetLoadedCall) Do(f func() bool) *MockOrderedSetLoadedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetLoadedCall) DoAndReturn(f func() bool) *MockOrderedSetLoadedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Receive mocks base method.
func (m *MockOrderedSet) Receive(k rangesync.KeyBytes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", k)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockOrderedSetMockRecorder) Receive(k any) *MockOrderedSetReceiveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockOrderedSet)(nil).Receive), k)
	return &MockOrderedSetReceiveCall{Call: call}
}

// MockOrderedSetReceiveCall wrap *gomock.Call
type MockOrderedSetReceiveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetReceiveCall) Return(arg0 error) *MockOrderedSetReceiveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetReceiveCall) Do(f func(rangesync.KeyBytes) error) *MockOrderedSetReceiveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetReceiveCall) DoAndReturn(f func(rangesync.KeyBytes) error) *MockOrderedSetReceiveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Received mocks base method.
func (m *MockOrderedSet) Received() rangesync.SeqResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Received")
	ret0, _ := ret[0].(rangesync.SeqResult)
	return ret0
}

// Received indicates an expected call of Received.
func (mr *MockOrderedSetMockRecorder) Received() *MockOrderedSetReceivedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Received", reflect.TypeOf((*MockOrderedSet)(nil).Received))
	return &MockOrderedSetReceivedCall{Call: call}
}

// MockOrderedSetReceivedCall wrap *gomock.Call
type MockOrderedSetReceivedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetReceivedCall) Return(arg0 rangesync.SeqResult) *MockOrderedSetReceivedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetReceivedCall) Do(f func() rangesync.SeqResult) *MockOrderedSetReceivedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetReceivedCall) DoAndReturn(f func() rangesync.SeqResult) *MockOrderedSetReceivedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Recent mocks base method.
func (m *MockOrderedSet) Recent(since time.Time) (rangesync.SeqResult, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recent", since)
	ret0, _ := ret[0].(rangesync.SeqResult)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Recent indicates an expected call of Recent.
func (mr *MockOrderedSetMockRecorder) Recent(since any) *MockOrderedSetRecentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recent", reflect.TypeOf((*MockOrderedSet)(nil).Recent), since)
	return &MockOrderedSetRecentCall{Call: call}
}

// MockOrderedSetRecentCall wrap *gomock.Call
type MockOrderedSetRecentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetRecentCall) Return(arg0 rangesync.SeqResult, arg1 int) *MockOrderedSetRecentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetRecentCall) Do(f func(time.Time) (rangesync.SeqResult, int)) *MockOrderedSetRecentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetRecentCall) DoAndReturn(f func(time.Time) (rangesync.SeqResult, int)) *MockOrderedSetRecentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SplitRange mocks base method.
func (m *MockOrderedSet) SplitRange(x, y rangesync.KeyBytes, count int) (rangesync.SplitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitRange", x, y, count)
	ret0, _ := ret[0].(rangesync.SplitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SplitRange indicates an expected call of SplitRange.
func (mr *MockOrderedSetMockRecorder) SplitRange(x, y, count any) *MockOrderedSetSplitRangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitRange", reflect.TypeOf((*MockOrderedSet)(nil).SplitRange), x, y, count)
	return &MockOrderedSetSplitRangeCall{Call: call}
}

// MockOrderedSetSplitRangeCall wrap *gomock.Call
type MockOrderedSetSplitRangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetSplitRangeCall) Return(arg0 rangesync.SplitInfo, arg1 error) *MockOrderedSetSplitRangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetSplitRangeCall) Do(f func(rangesync.KeyBytes, rangesync.KeyBytes, int) (rangesync.SplitInfo, error)) *MockOrderedSetSplitRangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetSplitRangeCall) DoAndReturn(f func(rangesync.KeyBytes, rangesync.KeyBytes, int) (rangesync.SplitInfo, error)) *MockOrderedSetSplitRangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithCopy mocks base method.
func (m *MockOrderedSet) WithCopy(ctx context.Context, toCall func(rangesync.OrderedSet) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCopy", ctx, toCall)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithCopy indicates an expected call of WithCopy.
func (mr *MockOrderedSetMockRecorder) WithCopy(ctx, toCall any) *MockOrderedSetWithCopyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCopy", reflect.TypeOf((*MockOrderedSet)(nil).WithCopy), ctx, toCall)
	return &MockOrderedSetWithCopyCall{Call: call}
}

// MockOrderedSetWithCopyCall wrap *gomock.Call
type MockOrderedSetWithCopyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetWithCopyCall) Return(arg0 error) *MockOrderedSetWithCopyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetWithCopyCall) Do(f func(context.Context, func(rangesync.OrderedSet) error) error) *MockOrderedSetWithCopyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetWithCopyCall) DoAndReturn(f func(context.Context, func(rangesync.OrderedSet) error) error) *MockOrderedSetWithCopyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
